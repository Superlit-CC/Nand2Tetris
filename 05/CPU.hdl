// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    /*
        if(instruction[15] == 0) A-instruction --> loadinst = 0
        else C-instruction loadinst = 1
    */
    And(a=true, b=instruction[15], out=loadinst); //A-instruction or C-instruction
    Mux16(a=instruction, b=aluoutput, sel=loadinst, out=outmux1); //A-inst instruction is an address
    
    /*
    C-inst: if(instruction[5] == 1) load A register;
    A-inst: always access A register 
    */
    Mux(a=true, b=instruction[5], sel=loadinst, out=loadareg); 
    ARegister(in=outmux1, load=loadareg, out[0..14]=addressM, out=outareg);

    Mux(a=false, b=instruction[4], sel=loadinst, out=loaddreg);
    DRegister(in=aluoutput, load=loaddreg, out=outdreg);

    Mux16(a=outareg, b=inM, sel=instruction[12], out=outmux2);
    ALU(x=outdreg, y=outmux2, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
        out=aluoutput, out=outM, zr=aluzr, ng=alung);

    Mux(a=false, b=instruction[3], sel=loadinst, out=writeM);

    /*
        ng  zr  po
        1   0   0
        0   1   0
        0   0   1
        1   1   not exit    
    */
    Or(a=alung, b=aluzr, out=ngorzr);
    Not(in=ngorzr, out=alupo);
    And(a=alung, b=instruction[2], out=cmp2); 
    And(a=aluzr, b=instruction[1], out=cmp1);
    And(a=alupo, b=instruction[0], out=cmp0);
    Or(a=cmp0, b=cmp1, out=cmp01);
    Or(a=cmp01, b=cmp2, out=cmp012);

    /*
    C-inst: ALU sign bits & the c-inst jjj bits not equals 0
    A-inst: never jump
    */
    And(a=loadinst, b=cmp012, out=jmp);

    PC(in=outareg, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}
